{"version":3,"file":"viewport_scroller.js","sourceRoot":"","sources":["../../../../packages/common/src/viewport_scroller.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {defineInjectable, inject} from '@angular/core';\n\nimport {DOCUMENT} from './dom_tokens';\n\n/**\n * Manages the scroll position.\n *\n * @publicApi\n */\nexport abstract class ViewportScroller {\n  // De-sugared tree-shakable injection\n  // See #23917\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable(\n      {providedIn: 'root', factory: () => new BrowserViewportScroller(inject(DOCUMENT), window)});\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   *\n   * When given a tuple with two number, the service will always use the numbers.\n   * When given a function, the service will invoke the function every time it restores scroll\n   * position.\n   */\n  abstract setOffset(offset: [number, number]|(() => [number, number])): void;\n\n  /**\n   * Returns the current scroll position.\n   */\n  abstract getScrollPosition(): [number, number];\n\n  /**\n   * Sets the scroll position.\n   */\n  abstract scrollToPosition(position: [number, number]): void;\n\n  /**\n   * Scrolls to the provided anchor.\n   */\n  abstract scrollToAnchor(anchor: string): void;\n\n  /**\n   *\n   * Disables automatic scroll restoration provided by the browser.\n   *\n   * See also [window.history.scrollRestoration\n   * info](https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration)\n   */\n  abstract setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void;\n}\n\n/**\n * Manages the scroll position.\n */\nexport class BrowserViewportScroller implements ViewportScroller {\n  private offset: () => [number, number] = () => [0, 0];\n\n  constructor(private document: any, private window: any) {}\n\n  /**\n   * Configures the top offset used when scrolling to an anchor.\n   *\n   * * When given a number, the service will always use the number.\n   * * When given a function, the service will invoke the function every time it restores scroll\n   * position.\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {\n    if (Array.isArray(offset)) {\n      this.offset = () => offset;\n    } else {\n      this.offset = offset;\n    }\n  }\n\n  /**\n   * Returns the current scroll position.\n   */\n  getScrollPosition(): [number, number] {\n    if (this.supportScrollRestoration()) {\n      return [this.window.scrollX, this.window.scrollY];\n    } else {\n      return [0, 0];\n    }\n  }\n\n  /**\n   * Sets the scroll position.\n   */\n  scrollToPosition(position: [number, number]): void {\n    if (this.supportScrollRestoration()) {\n      this.window.scrollTo(position[0], position[1]);\n    }\n  }\n\n  /**\n   * Scrolls to the provided anchor.\n   */\n  scrollToAnchor(anchor: string): void {\n    if (this.supportScrollRestoration()) {\n      const elSelectedById = this.document.querySelector(`#${anchor}`);\n      if (elSelectedById) {\n        this.scrollToElement(elSelectedById);\n        return;\n      }\n      const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);\n      if (elSelectedByName) {\n        this.scrollToElement(elSelectedByName);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Disables automatic scroll restoration provided by the browser.\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {\n    if (this.supportScrollRestoration()) {\n      const history = this.window.history;\n      if (history && history.scrollRestoration) {\n        history.scrollRestoration = scrollRestoration;\n      }\n    }\n  }\n\n  private scrollToElement(el: any): void {\n    const rect = el.getBoundingClientRect();\n    const left = rect.left + this.window.pageXOffset;\n    const top = rect.top + this.window.pageYOffset;\n    const offset = this.offset();\n    this.window.scrollTo(left - offset[0], top - offset[1]);\n  }\n\n  /**\n   * We only support scroll restoration when we can get a hold of window.\n   * This means that we do not support this behavior when running in a web worker.\n   *\n   * Lifting this restriction right now would require more changes in the dom adapter.\n   * Since webworkers aren't widely used, we will lift it once RouterScroller is\n   * battle-tested.\n   */\n  private supportScrollRestoration(): boolean {\n    try {\n      return !!this.window && !!this.window.scrollTo;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n\n/**\n * Provides an empty implementation of the viewport scroller. This will\n * live in @angular/common as it will be used by both platform-server and platform-webworker.\n */\nexport class NullViewportScroller implements ViewportScroller {\n  /**\n   * Empty implementation\n   */\n  setOffset(offset: [number, number]|(() => [number, number])): void {}\n\n  /**\n   * Empty implementation\n   */\n  getScrollPosition(): [number, number] { return [0, 0]; }\n\n  /**\n   * Empty implementation\n   */\n  scrollToPosition(position: [number, number]): void {}\n\n  /**\n   * Empty implementation\n   */\n  scrollToAnchor(anchor: string): void {}\n\n  /**\n   * Empty implementation\n   */\n  setHistoryScrollRestoration(scrollRestoration: 'auto'|'manual'): void {}\n}"]}