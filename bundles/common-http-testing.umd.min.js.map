{"version":3,"sources":["../../../packages/common/esm5/http/testing/src/request.js","../../../packages/common/esm5/http/testing/src/backend.js","../../../packages/common/esm5/http/testing/src/module.js"],"names":["this","request","observer","get","opts","Error","url","urlWithParams","headers","_angular_common_http","HttpHeaders","body","responseType","ArrayBuffer","_toArrayBufferBody","Blob","_toBlob","_toJsonBody","_maybeConvertBody","statusText","undefined","status","HttpErrorResponse","next","HttpResponse","complete","error","cancelled","event","format","HttpClientTestingBackend","prototype","handle","req","_this","rxjs","Observable","testReq","TestRequest","_match","match","open","filter","forEach","result","index","indexOf","description","descriptionFromMatcher","matches","length","verify","ignoreCancelled","requests","map","split","method","matcher","name","decorators","NgModule","args","HttpClientModule","providers","provide","HttpBackend","useExisting","HttpTestingController"],"mappings":"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","file":"/mnt/c/Users/Sarun/dev/angular/dist/packages-dist/common/bundles/common-http-testing.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * \\@publicApi\n */\nvar /**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * \\@publicApi\n */\nTestRequest = /** @class */ (function () {\n    function TestRequest(request, observer) {\n        this.request = request;\n        this.observer = observer;\n        /**\n         * \\@internal set by `HttpClientTestingBackend`\n         */\n        this._cancelled = false;\n    }\n    Object.defineProperty(TestRequest.prototype, \"cancelled\", {\n        /**\n         * Whether the request was cancelled after it was sent.\n         */\n        get: /**\n         * Whether the request was cancelled after it was sent.\n         * @return {?}\n         */\n        function () { return this._cancelled; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     * @param {?} body\n     * @param {?=} opts\n     * @return {?}\n     */\n    TestRequest.prototype.flush = /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     * @param {?} body\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (body, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (this.cancelled) {\n            throw new Error(\"Cannot flush a cancelled request.\");\n        }\n        /** @type {?} */\n        var url = this.request.urlWithParams;\n        /** @type {?} */\n        var headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        /** @type {?} */\n        var statusText = opts.statusText;\n        /** @type {?} */\n        var status = opts.status !== undefined ? opts.status : 200;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = 204;\n                statusText = statusText || 'No Content';\n            }\n            else {\n                statusText = statusText || 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body: body, headers: headers, status: status, statusText: statusText, url: url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers: headers, status: status, statusText: statusText, url: url }));\n        }\n    };\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     */\n    /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     * @param {?} error\n     * @param {?=} opts\n     * @return {?}\n     */\n    TestRequest.prototype.error = /**\n     * Resolve the request by returning an `ErrorEvent` (e.g. simulating a network failure).\n     * @param {?} error\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (error, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (this.cancelled) {\n            throw new Error(\"Cannot return an error for a cancelled request.\");\n        }\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\n            throw new Error(\"error() called with a successful status.\");\n        }\n        /** @type {?} */\n        var headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error: error,\n            headers: headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    };\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     * @param {?} event\n     * @return {?}\n     */\n    TestRequest.prototype.event = /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.cancelled) {\n            throw new Error(\"Cannot send events to a cancelled request.\");\n        }\n        this.observer.next(event);\n    };\n    return TestRequest;\n}());\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * \\@publicApi\n */\nexport { TestRequest };\nif (false) {\n    /**\n     * \\@internal set by `HttpClientTestingBackend`\n     * @type {?}\n     */\n    TestRequest.prototype._cancelled;\n    /** @type {?} */\n    TestRequest.prototype.request;\n    /** @type {?} */\n    TestRequest.prototype.observer;\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n * @param {?} body\n * @return {?}\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n * @param {?} body\n * @return {?}\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n * @param {?} body\n * @param {?=} format\n * @return {?}\n */\nfunction _toJsonBody(body, format) {\n    if (format === void 0) { format = 'JSON'; }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for ArrayBuffers.\");\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(\"Automatic conversion to \" + format + \" is not supported for Blobs.\");\n    }\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n        Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(\"Automatic conversion to \" + format + \" is not supported for response type.\");\n}\n/**\n * Helper function to convert a response body to a string.\n * @param {?} body\n * @return {?}\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n * @param {?} responseType\n * @param {?} body\n * @return {?}\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(\"Unsupported responseType: \" + responseType);\n    }\n}\n//# sourceMappingURL=request.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpEventType } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TestRequest } from './request';\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nvar HttpClientTestingBackend = /** @class */ (function () {\n    function HttpClientTestingBackend() {\n        /**\n         * List of pending requests which have not yet been expected.\n         */\n        this.open = [];\n    }\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.handle = /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        return new Observable(function (observer) {\n            /** @type {?} */\n            var testReq = new TestRequest(req, observer);\n            _this.open.push(testReq);\n            observer.next(/** @type {?} */ ({ type: HttpEventType.Sent }));\n            return function () { testReq._cancelled = true; };\n        });\n    };\n    /**\n     * Helper function to search for requests in the list of open requests.\n     * @param {?} match\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype._match = /**\n     * Helper function to search for requests in the list of open requests.\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) {\n        if (typeof match === 'string') {\n            return this.open.filter(function (testReq) { return testReq.request.urlWithParams === match; });\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter(function (testReq) { return match(testReq.request); });\n        }\n        else {\n            return this.open.filter(function (testReq) { return (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url); });\n        }\n    };\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     * @param {?} match\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.match = /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     * @param {?} match\n     * @return {?}\n     */\n    function (match) {\n        var _this = this;\n        /** @type {?} */\n        var results = this._match(match);\n        results.forEach(function (result) {\n            /** @type {?} */\n            var index = _this.open.indexOf(result);\n            if (index !== -1) {\n                _this.open.splice(index, 1);\n            }\n        });\n        return results;\n    };\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.expectOne = /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    function (match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        /** @type {?} */\n        var matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found \" + matches.length + \" requests.\");\n        }\n        if (matches.length === 0) {\n            throw new Error(\"Expected one matching request for criteria \\\"\" + description + \"\\\", found none.\");\n        }\n        return matches[0];\n    };\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.expectNone = /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     * @param {?} match\n     * @param {?=} description\n     * @return {?}\n     */\n    function (match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        /** @type {?} */\n        var matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(\"Expected zero matching requests for criteria \\\"\" + description + \"\\\", found \" + matches.length + \".\");\n        }\n    };\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    /**\n     * Validate that there are no outstanding requests.\n     * @param {?=} opts\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.verify = /**\n     * Validate that there are no outstanding requests.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        /** @type {?} */\n        var open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter(function (testReq) { return !testReq.cancelled; });\n        }\n        if (open.length > 0) {\n            /** @type {?} */\n            var requests = open.map(function (testReq) {\n                /** @type {?} */\n                var url = testReq.request.urlWithParams.split('?')[0];\n                /** @type {?} */\n                var method = testReq.request.method;\n                return method + \" \" + url;\n            })\n                .join(', ');\n            throw new Error(\"Expected no open requests, found \" + open.length + \": \" + requests);\n        }\n    };\n    /**\n     * @param {?} matcher\n     * @return {?}\n     */\n    HttpClientTestingBackend.prototype.descriptionFromMatcher = /**\n     * @param {?} matcher\n     * @return {?}\n     */\n    function (matcher) {\n        if (typeof matcher === 'string') {\n            return \"Match URL: \" + matcher;\n        }\n        else if (typeof matcher === 'object') {\n            /** @type {?} */\n            var method = matcher.method || '(any)';\n            /** @type {?} */\n            var url = matcher.url || '(any)';\n            return \"Match method: \" + method + \", URL: \" + url;\n        }\n        else {\n            return \"Match by function: \" + matcher.name;\n        }\n    };\n    HttpClientTestingBackend.decorators = [\n        { type: Injectable },\n    ];\n    return HttpClientTestingBackend;\n}());\nexport { HttpClientTestingBackend };\nif (false) {\n    /**\n     * List of pending requests which have not yet been expected.\n     * @type {?}\n     */\n    HttpClientTestingBackend.prototype.open;\n}\n//# sourceMappingURL=backend.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpBackend, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { HttpTestingController } from './api';\nimport { HttpClientTestingBackend } from './backend';\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * \\@publicApi\n */\nvar HttpClientTestingModule = /** @class */ (function () {\n    function HttpClientTestingModule() {\n    }\n    HttpClientTestingModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        HttpClientModule,\n                    ],\n                    providers: [\n                        HttpClientTestingBackend,\n                        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n                        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n                    ],\n                },] },\n    ];\n    return HttpClientTestingModule;\n}());\nexport { HttpClientTestingModule };\n//# sourceMappingURL=module.js.map"]}